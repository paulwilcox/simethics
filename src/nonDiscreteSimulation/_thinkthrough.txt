Constraints
  : g, y, b between 0 and 10
  : g, y, b transfer at 1t (loose 1 unit if source, gain if target)
  : at t0, g = 0, y = 1, b = 2
  : g <- y + b

First escape
  : g tops out at t = 10
  : y bottoms out at t = 1
      :: yEnd = yStart - t, yEnd = 0 (bottom limit) 
      :: 0 = yStart - t 
      :: 0 = 1 - t 
      :: t = 1
      :: yEnd = 0 at t = 1
  : b bottoms out at t = 2
  : so transfer would stop at t = 1

At t = 1:
  : g can go up 1 unit
  : y, b can loose 1 unit
  : This is not an equation though.  It's a different kind of instruction
  : So converting to g = -(y + b), the latter negation representing loss in source means gain in target, was a mistake
  : Rather, just follow the flow constraints:
      :: g = 1t = 1
      :: y = -1t = -1
      :: b = -1t = -1
  : And these represent transfers, so at t1
      :: g = 1
      :: y = 0
      :: b = 1

-----------------------------------------------------------------------

Now, back to t0, same constraints, except:
  : g + y <- y + b
  : the relevant part is y <- y
  : The y's cancel out, pretty much saying y is independent (or like an unconsumed catalyst/trigger)
  : yFlowIn + yFlowOut = t - t = 0, so there is no flow
  : yEnd = yStart - 0, yEnd = 0, which has no solution.  
  : It never escapes (bottom-wise, but also wouldn't top-wise), and this is perfectly reasonable
  : IMPORTANT: notice that in analyzing y, we don't need to reference g or b

-----------------------------------------------------------------------

2y <- y 
  : yEnd = 2*yFlow + (yStart - yFlow)
  : yEnd = 2*t + 1 - t
  : yEnd = t + 1
  : yEnd - 1 = t
  : t = yEnd - 1
  : Solve for
      yEnd = 0: t = -1, negative so discard
      yEnd = 10: t = 9, we start y = 1, every tick nets an extra 1, so yes, 9 ticks gets us to 10

-----------------------------------------------------------------------

0.5y <- y
  : yEnd = 0.5*yFlow + (yStart - yFlow)
  : yEnd = 0.5t + 1 - t
  : t - 0.5t = 1 - yEnd
  : t(1 - 0.5) = 1 - yEnd
  : t = 2(1 - yEnd)
  : t = 2 - 2*yEnd
  : Solve for
      yEnd = 0: t = 2: Makes sense.  Every tick results in net reduction of 0.5.  Y starts at 1, so two unit ticks to reach 0
      yEnd = 10: t = -18: Discard because we're only going forward in time.
 
-----------------------------------------------------------------------

6y <- y*b: 
  : yEnd = 6(yFlow * bFlow) + (yStart - yFlow) : we don't care about 'bStart - bFlow' until we analyze b (at which pont we don't care about y
  : yEnd = 6(t*t) + 1 - t
  : -6t^2 + t = 1 - yEnd
  : -t(6t-1) = 1 - yEnd
  : -t(6t-1) - 1 = -yEnd
  : t(6t-1) + 1 = yEnd
  : Solve for 
      yEnd = 0: t(6t-1) = (yEnd - 1); no solution exists.  That's okay, we don't expect a bottoming out
      yEnd = 10: tops out at t = 1.311, according to desmos: 
        > at 6(1.311^2) + 1 - 1.311 = 10.001326 (rounding issues I assume)
        > so, yes, it checks out.

if y = 1t and b = 1/t then
  6t = t*(1/t)
  6t = t/t
  6t = 1
  And so it doesn't matter how you change either y or b, you get 6t.  
  Despite the arrow, it is not describing causation. The dependency of everything is on t, not on left and right sides
  
  



-----------------------------------------------------------------------

6y^2 + 2y <- 0.5y
  : How does this translate?
  : Bottom line, we're translating into a GROWTH rate for the variable, then adding it to varStart
  : The relevant parts of the <- function express the growth rate
  : But it seems to be the right side that we substitute for time.  

Being growth rates, seems we can isolate the additive parts?
  : 6y^2 <- 0.5y
  : 2y <- 0.5y

And at least for multiplication, seems the operations are opposite of equations
  : yEnd1 = 6(0.5*yFlow)^2
  : yEnd2 = 2(0.5*yFlow)
  : yEnd3 = yStart - yFlow (the non growth part)
  : yEnd = yEnd1 + yEnd2 + yEnd3 
  : yEnd = 3*yFlow^2 + yFlow + (yStart - yFlow)
  : yEnd = 3t^2 + t + 1 - t
  : yEnd = 3t^2 + 1
  : 3t^2 = yEnd - 1
  : t^2 = (yEnd - 1) / 3
  : t = sqrt((yEnd - 1) / 3)
  : Solve for:
      yEnd = 0: t = sqrt(0/3) = 0, bad, means it's already 0, which is wrong
      yEnd = 10: t = sqrt(9/3) = sqrt(3) = 1.73205081
	At this time, y has yielded 0.866025405, returning 6.23205082, decidedly less than the bound

WRONG!!!!

How about we just convert right side in terms of t, but NOT left side.
Justified based on right side, plugging in for 't' means that's how much has become available as a source.
But on left side, it's not dependent on 't'.  It's dependent on the right side.









