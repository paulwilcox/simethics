Constraints
  : g, y, b between 0 and 10
  : g, y, b transfer at 1t (loose 1 unit if source, gain if target)
  : at t0, g = 0, y = 1, b = 2
  : g <- y + b

First escape
  : g tops out at t = 10
  : y bottoms out at t = 1
      :: yEnd = yStart - t, yEnd = 0 (bottom limit) 
      :: 0 = yStart - t 
      :: 0 = 1 - t 
      :: t = 1
      :: yEnd = 0 at t = 1
  : b bottoms out at t = 2
  : so transfer would stop at t = 1

At t = 1:
  : g can go up 1 unit
  : y, b can loose 1 unit
  : This is not an equation though.  It's a different kind of instruction
  : So converting to g = -(y + b), the latter negation representing loss in source means gain in target, was a mistake
  : Rather, just follow the flow constraints:
      :: g = 1t = 1
      :: y = -1t = -1
      :: b = -1t = -1
  : And these represent transfers, so at t1
      :: g = 1
      :: y = 0
      :: b = 1

-----------------------------------------------------------------------

Now, back to t0, same constraints, except:
  : g + y <- y + b
  : the relevant part is y <- y
  : The y's cancel out, pretty much saying y is independent (or like an unconsumed catalyst/trigger)
  : yFlowIn + yFlowOut = t - t = 0, so there is no flow
  : yEnd = yStart - 0, yEnd = 0, which has no solution.  
  : It never escapes (bottom-wise, but also wouldn't top-wise), and this is perfectly reasonable
  : IMPORTANT: notice that in analyzing y, we don't need to reference g or b

-----------------------------------------------------------------------

6y <- y*b: 
  : yEnd = 6(yFlow * bFlow) + (yStart - yFlow) : we don't care about 'bStart - bFlow' until we analyze b (at which pont we don't care about y
  : yEnd = 6(t*t) + 1 - t
  : -6t^2 + t = 1 - yEnd
  : -t(6t-1) = 1 - yEnd
  : -t(6t-1) - 1 = -yEnd
  : t(6t-1) + 1 = yEnd
  : Solve for 
      yEnd = 0: t(6t-1) = (yEnd - 1); no solution exists.  That's okay, we don't expect a bottoming out
      yEnd = 10: tops out at t = 1.311, according to desmos: 
        > at 6(1.311^2) + 1 - 1.311 = 10.001326 (rounding issues I assume)
        > so, yes, it checks out.

if y = 1t and b = 1/t then
  6t = t*(1/t)
  6t = t/t
  6t = 1
  And so it doesn't matter how you change either y or b, you get 6t.  
  Despite the arrow, it is not describing causation. The dependency of everything is on t, not on left and right sides
  
  y and b are not numeric variables, they are types.  
  You can't take y and b and add them together.  Well, here you can and you get 'total grahms'.  But thats only because
  we defined units in terms of grahms.  And even then we lost y and b as information.  But to hone the point.  Imagine
  y was a grahm of yellow powder, and b is a blue baloon.  Add them or multiply them together and you get a total what?

  In this context, it seems you really can't multiply types.  In fact, seems you can't even add them.  Right?
  So how do you represent their interation?  

  Confirmed with misty.  Furthermore, the equation may not even have a solution (at least desmos can't plot it).  
  When you have y on both sides, you constrain it on both sides.  You minus well say 6 = 1.  Doesn't work.  

--------------------------------------------------------------------------------------------------------------

Chemistry coefficients represent proportions, additions represent really just presence, so they minus well be commas

  6y, g <- y, 2b			: The input of 1y and 2b outputs 6y, 1g, and 0b.  
  yChange = 6y - y = 5y
  gChange = g - 0 = g
  bChange = 0 - 2b = -2b
  
  So I think I was closer with "growth" rates, but not exactly.

--------------------------------------------------------------------------------------------------------------

Represent the following:
  - Per unit of time, you get 1y and 1b
  - You can convert y and b to get 1g.  To do that, you multiply y and b.  

The y and b are the inputs, and related to time.
The g is output, and not related to time, but rather to y and b 
  (though later on we may need to use its flow to upper constrain how much it an take in, but ignore for now)

y[6y], g[y*b] <- y, 2b 	: maybe, with var[] 
			  'var' - the related variable to output, 
			  '[]' how to calculate it in relation to inputs.  
				In the case of g[y*b], y*b would be y*2b.  
			  Coefficients on the right side done away with alltogether, so proportions not fixed
			  
Matrix is tempting but don't know if it quite works due to pointers to what would be different columns and different rows in nonlinear fashion

y[6y], g[y*b] <- y[t], b[2t] : So var[] notation is broadened, do [] to get var, but here it's as throughput, not for the user
y[6t], g[t*2t] <- y[t], b[2t]

Now convert to change, and to do this, you match variables by type
yChange = 6t - t = 5t
bChange = 0 - 2t = -2t : there is no b in the source, which is the same as b[0]
gChange = t*2t - 0 = 2t * t = 2t^2

Now, convert to end values 
yEnd = yStart + yChange = 1 + 5t = 5t + 1
bEnd = bStart + bChange = 2 - 2t = -2t + 1
gEnd = gStart + gChange = 0 + 2t^2 = 2t^2 

Check constraints for when each would bottom or top out:

Bottom Out			Top Out

yEnd = 0			yEnd = 10
  5t + 1 = 0			  5t + 1 = 10
  5t = -1			  5t = 9
  t = -1/5 			  t = 9/5
  We don't go back in             t = 1.8
  time.  So we'll never		Checks out:
  get there.			  Starts with 1 and a 
				  net change of 5 per t.
				  5 * 1.8 + 1 = 10

bEnd = 0			bEnd = 10
  -2t + 1 = 0			  -2t + 1 = 10
  -2t = -1			  -2t = 9
  2t = 1			  2t = -9
  t = 0.5			  t = -9/5
Checks out:			Don't go back in time
  Starts with 1 and you
  just keep loosing 2 per
  t with no gain.  You're 
  out in half a t.

gEnd = 0			gEnd = 10
  2t^2 = 0			  2t^2 = 10
  t^2 = 0			  t^2 = 5
  t = 0				  t = sqrt(5)
  Checks out, initial 		  t = 2.2361...
  conditions have g as 0.	Checks out:
  But at t=0 2t^2 is 		  At that time,
  positive.  Meaning this	  y and b give as 2.2361
  is a 'touch' of the 		  we double b and multiply with y
  bottom bound, not a		  2.2361 * 2*2.2361 = 10.
  passing of it.  So we
  keep ticking.
    
So, in summary;
 y never bottoms out, tops out at t = 1.8
 b bottoms out at t = 0.5, never tops out
 g starts at bottom, but only goes up from there so we don't say it bottoms out, it tops out at 2.2361
 Of these, b goes out of bounds first at t = 0.5
 There is no more b to give after that, so the relation breaks down afterwards.
 So we tick time by 0.5

I think I got it.  Now hopefully it's just a matter of notation, and recoding.

-----------------------------------------------------------------------------------
GOALS

** Syntax **

Thinking of something like
- 'yellow, 2*blue -> 6*yellow, green: yellow*blue'
- 'input 1 yellow and 2 blue, output 6 * inputted yellow and an amount of green equal to input yellow * input blue'
- This approach might be easier to implement, but also doesn't have outputs in same units as inputs
    > green: yellow*blue is yellow input * blue input, which is yellow * 2*blue 

** Composition **

What's it look like:
- 'yellow, 2*blue -> 6*yellow, green: yellow*blue'
- 'yellow, 2*green -> 

** Problems **

- How to break the assumption that objects which rules reference
  have the same internal flows.  (Hard, and even harder if non-linear)
  > Might not be hard.  Might be partly or fully already implemented.
  > Take each item at a time.  Assume the rest are simply present
    enough to meet their proportions.  Then just see when the item
    reaches its limit on its own terms.   Take the least of these.
- How to have specific objects of the same type commune together
  in rules that describe variables (Easy - in fact partially solved)
- How to get rules to combine with each other.  (Medium - standard math)
- How to reduce processing due to # of rules (Medium - encapsulation)
  > but has to pass and protect rules in addition to values
- How to allow abstraction, so that subtypes get picked up if a 
  rule describes a type.
- How to treat bound numbers as a subset of world (Easy - a bound number
  can be thought of as a world with one value, of one type, so any rules,
  if ever phrased abstractly, apply only to that one value.  Question is
  do I actually change my implementation to reflect this)



